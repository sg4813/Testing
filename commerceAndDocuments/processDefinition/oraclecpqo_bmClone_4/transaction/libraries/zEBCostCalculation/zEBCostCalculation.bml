retVal = "";
localRegion = "";
localConfigurator = "";
localNoOfLocations = 0;
localNoOfEmployees = 0;
localRevenueFromRetailStoresNotOverall = 0.0;
localNetProfitMargin = "";
localTypeOfRetailer = "";
localTypeOfHosting = "";
localTypeOfSupport = "";
localDiscVal = 0.0;
localWFM = "";
localRTM = "";
localRetailType = "";
localCost = "";
localPSCost = 0.0;
localSKU = "";
localPFDesc = "";
localPercentNetPrice = 0.0;
localZPAPercentNetPrice = 0.0;
localAnnualListPrice = 0.0;
configuratorArr = string[];
dictPFDesc = dict("string");
dictCostMod = dict("float");
	for line in transactionLine {
	listPrice_l = 0.0;
		if(line._model_name <> "" AND line.oRCL_ABO_ActionCode_l<>"RENEW" AND line.oRCL_ABO_ActionCode_l<>"TERMINATE"){
			//modelNamePS = getconfigattrvalue(line._document_number, "ZEB_productLine");
			//print modelNamePS;
			localConfigurator = line._model_name;
			if(localConfigurator == "Reflexis"){
				append(configuratorArr, localConfigurator);
				localNoOfLocations = atoi(getconfigattrvalue(line._document_number, "storeDummyRef"));
				localNoOfEmployees = atoi(getconfigattrvalue(line._document_number, "empDummyRef"));
				localTypeOfHosting = getconfigattrvalue(line._document_number, "hostingDummyRef");			
				if(localNoOfEmployees > 100000){
				localWFM = "Very Large WFM";
				}elif(localNoOfEmployees > 40000 AND localNoOfEmployees <= 100000){
				localWFM = "Large WFM";
				}elif(localNoOfEmployees > 10000 AND localNoOfEmployees <= 40000){
				localWFM = "Medium WFM";
				}else{
				localWFM = "Small WFM";
				}
				if(localNoOfLocations > 1000){
				localRTM = "Large RTM";
				}elif(localNoOfLocations > 150 AND localNoOfLocations <= 1000){
				localRTM = "Medium RTM";
				}else{
				localRTM = "Small RTM";
				}
				localRevenueFromRetailStoresNotOverall = atof(getconfigattrvalue(line._document_number, "revenueFromRetailStoresNotOverallDummyRef"));
				localNetProfitMargin = getconfigattrvalue(line._document_number, "netProfitMarginDummyRef");
				localTypeOfRetailer = getconfigattrvalue(line._document_number, "typeOfRetailerDummyRef");
				if(localTypeOfRetailer == "Banking"){
				localRetailType = "Banking";
				}else{
				localRetailType = "Other";
				}
			}if(localConfigurator == "Prescriptive Analytics"){
			append(configuratorArr, localConfigurator);
			}
		}else{
		//Below Code for Cost Calculations
		partNum = line._part_number;
		rsCost = bmql("Select ProductFamilyDesc, SKU, CostModule from RefSKUDetails where SKU = $partNum");
			for each in rsCost{
			localCost = get(each, "CostModule");
			localSKU = get(each, "SKU");
			localPFDesc = get(each, "ProductFamilyDesc");
			}
			put(dictPFDesc, localSKU , localPFDesc);
			if(containskey(dictCostMod, localCost)){
			localAnnualListPrice = localAnnualListPrice + line.annualCloudPriceInclHosting_l;
			put(dictCostMod, localCost, localAnnualListPrice);
			}else{
			put(dictCostMod, localCost, line.annualCloudPriceInclHosting_l);
			localAnnualListPrice = line.annualCloudPriceInclHosting_l;
			}
		}
	}
	//another loop
	localBusiness = "";
	iCount = 0;
	for line in transactionLine{
		//print "transaction line@@@@@@";
	if(line._model_name <> "" AND line.oRCL_ABO_ActionCode_l<>"RENEW" AND line.oRCL_ABO_ActionCode_l<>"TERMINATE"){
		//print "******************";
	localConfigurator = line._model_name;
	localBusiness = getconfigattrvalue(line._document_number, "typeOfRetailerRef");
	}else{
		//print "&&&&&&&&&&&&&&";
		partNum = line._part_number;
		localHrs = line.hours_l;
		if(region_t == "Zebra NALA"){
			if(find(accountPriceList_t, "LA") <> -1){
			localRegion = "LA";
			}else{
			localRegion = "NA";
			}
		}
		if(find(region_t,"EMEA") <> -1){
		localRegion = "EMEA";
		}
		if(find(region_t,"APAC") <> -1){
		localRegion = "APAC";
		}
		localFinalCostPrice = 0.0;
		rsCost = bmql("Select CostModule from RefSKUDetails where SKU = $partNum");
		for each in rsCost{
		localCost = get(each, "CostModule");
		}
		if((findinarray(configuratorArr,"Reflexis") <> -1 AND localConfigurator == "Reflexis") OR (partNum == "Q-Walk Professional Services"OR partNum == "Pulse Professional Services" OR partNum == "Real Time Task Manager Professional Services" OR partNum == "Q-Comm Professional Services" OR partNum == "Q-Doc Professional Services" OR partNum == "Task Manager Professional Services" OR partNum == "Q-Visual Professional Services" OR partNum == "Q-Check Professional Services" OR partNum == "Advanced Analytics Professional Services" OR partNum == "Integration Professional Services" OR partNum == "Custom Professional Services" )){
			//print "11111111";
		rs= recordset();
		if(get(dictPFDesc, partNum) == "Professional Services" OR (partNum == "Q-Walk Professional Services" OR partNum == "Pulse Professional Services" OR partNum == "Real Time Task Manager Professional Services" OR partNum == "Q-Comm Professional Services" OR partNum == "Q-Doc Professional Services" OR partNum == "Task Manager Professional Services" OR partNum == "Q-Visual Professional Services" OR partNum == "Q-Check Professional Services" OR partNum == "Advanced Analytics Professional Services" OR partNum == "Integration Professional Services" OR partNum == "Custom Professional Services")){
			//print "22222";
			//print localRegion;
			//print "22222";
		rs3 = bmql("Select Cost from PS_PerHour_Price where ModelName = 'Reflexis' AND Org = $localRegion");
		for each in rs3
		{
			localPSCost = atof(get(each,"Cost"));
		}
		//print localPSCost;
		conversionfac = 1.0;
		rs1 = bmql("Select ConversionFactor from ConversionFactor where SourceCurrency =$currency_t AND TargetCurrency ='USD'");
		for each in rs1
		{
			conversionfac = atof(get(each,"ConversionFactor"));
		}
		//print conversionfac;
		businessFactor = 1.0;
		recordSetBusiness = bmql("select Category,Value,Multiplier from Reflexis_Multiplier where Category = 'Type of Retailer' and Value = $localBusiness");
		for eachBusiness in recordSetBusiness{
			businessFactor = atof(get(eachBusiness,"Multiplier"));
		}
		//print businessFactor;
		//print localHrs;
		localPSCost = localPSCost * localHrs * businessFactor;
		localPSCost = localPSCost / conversionfac;
		localFinalCostPrice = round(localPSCost , 2);
		//print localFinalCostPrice;
		}else{
		
		if(localCost == "WFM"){
		rs = bmql("Select DataHosting, SWLicense from SaaSHostingCost where Model = 'Reflexis' AND TypeOfRetailer = $localRetailType AND CostModule = $localCost AND CustomerSize = $localWFM");
		}elif(localCost == "AI Budget" OR localCost == "AI Suite"){
		rs = bmql("Select DataHosting, SWLicense from SaaSHostingCost where Model = 'Reflexis' AND TypeOfRetailer = $localRetailType AND CostModule = $localCost");
		}else{
		rs = bmql("Select DataHosting, SWLicense from SaaSHostingCost where Model = 'Reflexis' AND TypeOfRetailer = $localRetailType AND CostModule = $localCost AND CustomerSize = $localRTM");
		}
		//print rs;
		DataHostingVal = 0;
		SWLicenseVal = 0;
		totalCostVal = 0.0;
		totalZPACostVal = 0.0;		
		for each in rs{
		DataHostingVal = atof(get(each, "DataHosting"));
		SWLicenseVal = atof(get(each,"SWLicense"));
		totalCostVal = DataHostingVal + SWLicenseVal;		
		}
		if(localTypeOfHosting == "99.90% - Higher Availability - Surcharge"){
		totalCostVal = 1.4 * totalCostVal;
		}
		conversionfac = 1.0;
		rs1 = bmql("Select ConversionFactor from ConversionFactor where SourceCurrency =$currency_t AND TargetCurrency ='USD'");
		for each in rs1
		{
			conversionfac = atof(get(each,"ConversionFactor"));
		}
		totalCostVal = totalCostVal / conversionfac;
		if(get(dictCostMod, localCost) > 0.0){
		localNetFactor = 0.0;
		localListFactor = 0.0;
		rs2 = bmql("Select CostPercentage, CostBasis, CostComponent from SaaSCost where Model = $localConfigurator");
			for each in rs2
			{
				localCostBasis = get(each,"CostBasis");
				if(localCostBasis == "Net Price"){
				localNetFactor = localNetFactor + atof(get(each,"CostPercentage"))/100;
				}else{
				localListFactor = localListFactor + atof(get(each,"CostPercentage"))/100;
				}
			}
		localPercentNetPrice = round((localNetFactor * line.annualCloudNetPrice_l),2);
			if(localCost == "AI Budget"){
			localFinalCostPrice = round((totalCostVal * line.annualCloudPriceInclHosting_l)/get(dictCostMod, localCost),2);
			}else{
			localFinalCostPrice = round((totalCostVal * line.annualCloudPriceInclHosting_l)/get(dictCostMod, localCost),2) + localPercentNetPrice;
			}
		}
		}
		}
		if(findinarray(configuratorArr,"Prescriptive Analytics") <> -1 AND localConfigurator == "Prescriptive Analytics"){
		localNetFactor = 0.0;
		localListFactor = 0.0;
		rs3 = bmql("Select CostPercentage, CostBasis, CostComponent from SaaSCost where Model = $localConfigurator");
			for each in rs3
			{
				localCostBasis = get(each,"CostBasis");
				if(localCostBasis == "Net Price"){
				localNetFactor = localNetFactor + atof(get(each,"CostPercentage"))/100;
				}else{
				localListFactor = localListFactor + atof(get(each,"CostPercentage"))/100;
				}
			}
		if(iCount == 0){
		totalZPACostVal = round((localListFactor * line.annualCloudPriceInclHosting_l), 2);
		iCount = iCount + 1;
		}else{
		totalZPACostVal = round((0.8 * localListFactor * line.annualCloudPriceInclHosting_l), 2);
		}
		localZPAPercentNetPrice = round((localNetFactor * line.annualCloudNetPrice_l),2);
		localFinalCostPrice = round(totalZPACostVal  + localZPAPercentNetPrice, 2);
		}
		
		//if(NOT startswith(line.modelName_l,"WorkForce Connect")){
		retVal = retVal + line._document_number + "~unitCost_l~" + string(localFinalCostPrice) + "|";	
		//}
	//End code
	}
	}
	return retVal;