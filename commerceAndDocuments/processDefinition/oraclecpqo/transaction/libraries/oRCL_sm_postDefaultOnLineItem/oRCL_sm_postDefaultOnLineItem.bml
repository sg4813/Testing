//Name : PostDefaultOnLineItemSM
//Variable Name : oRCL_sm_postDefaultOnLineItem
//Description:This BML is used for populating root asset Key, auto adjustments and charges for lines. 
//Invoked from sub doc ->Advanced Default->After formula
//Imported Sub doc attributes : _part_number, _document_number,oRCL_pRC_useUsageLock, _price_calculation_info
//Input Parameters:
//      "lineHierInfo" - dict("anytype"); result of AboBuildLineItemHierarchy execution
// Output: String
// Dependency : None

returnString = "";
docNumToRootDocNum = get(lineHierInfo, "DocNumToRootDocNum", "dict<string>");
docNumToAttrs = get(lineHierInfo, "DocNumToAttrs", "dict<anytype>");

for line in transactionLine {
    if(line.oRCL_pRC_useUsageLock == false AND line._price_calculation_info <> "") {
	calcInfo = jsonarrayget(jsonarray(line._price_calculation_info),0,"json");
	charges = jsonget(calcInfo,"charges", "jsonArray");
	returnString = returnString + "|"+util._SM.oRCL_pRC_populateCharges(charges, line._document_number);
    }
    autoAdjustments = jsonArray();
    partNumber = line._part_number;
    adjustmentList = bmql("select Charge_Name, Adjustment_Name,Adjustment_Amount,Adjustment_Type,Adjustment_Reason,Adjustment_Type,Adjustment_Basis,Adjust_Effectivity,Charge_Periods,Auto_Adjustment from ORCL_PRC_ADJUSTMENTS where Product=$partNumber");
    for adjustment in adjustmentList {
		adjustmentJson = json();
		jsonput(adjustmentJson,"oRCL_auto_adjustmentSequence_l",1);
		jsonput(adjustmentJson,"oRCL_auto_adjustmentName_l",get(adjustment,"Adjustment_Name"));
		jsonput(adjustmentJson,"oRCL_auto_adjustmentChargeName_l",get(adjustment,"Charge_Name"));
		jsonput(adjustmentJson,"oRCL_auto_adjustmentType_l",get(adjustment,"Adjustment_Type"));
		jsonput(adjustmentJson,"oRCL_auto_adjustmentBasis_l",get(adjustment,"Adjustment_Basis"));
		jsonput(adjustmentJson,"oRCL_auto_adjustmentEffectivity_l",get(adjustment,"Adjust_Effectivity"));
		jsonput(adjustmentJson,"oRCL_auto_numberOfPeriods_l",get(adjustment,"Charge_Periods"));
		jsonput(adjustmentJson,"oRCL_auto_adjustmentValue_l",get(adjustment,"Adjustment_Amount"));
	  
		jsonarrayappend(autoAdjustments, adjustmentJson);	
		
	}
	
	returnString = returnString +"|"+ line._document_number + "~oRCL_autoAdjustments~" + jsonarraytostr(autoAdjustments) + "|";
	
	//populate rotAssetKey_l
	rootAssetKey="";	
	if(containskey(docNumToRootDocNum , line._document_number)){
	    rootDocNumber = get(docNumToRootDocNum, line._document_number);	   
	    lineAttrMap = get(docNumToAttrs, rootDocNumber ,"dict<string>");
	   
	    rootAssetKey =  get(lineAttrMap, "itemInstanceId_l");	
	    
	}
	if(isnull(rootAssetKey) OR rootAssetKey == ""){	
	  //Simple product case
	  if ( len(line._model_variable_name) < 1 AND len(line._parent_doc_number) < 1 AND 
             len(line._line_bom_id) > 1  ){            
             lineAttrMap = get(docNumToAttrs, line._document_number ,"dict<string>");                      
             rootAssetKey =  get(lineAttrMap, "itemInstanceId_l" );         
          }
	}	
	
        	  
	returnString = returnString +"|"+ line._document_number+"~rootAssetKey_l~"+rootAssetKey;
}


return returnString;