// list of step variable names
listOfSteps = String[]{
	"start_step",
	"pending_process",
	"waitingForInternalApproval",
	"approved",
	"waitingForSignature",
	"signed",
	"orderedBeingFulfilled",
	"beingChangedCanceled",
	"closedFulfilled",
	"canceled",
	"rejectedByCustomer",
	"alternateVersionOrdered"
};
lastStepPos = sizeofarray(listOfSteps) - 1;

// fancier display names
fancyStepDict = dict("string");
put(fancyStepDict, "start_step", "Start");
put(fancyStepDict, "pending_process", "In Progress");
put(fancyStepDict, "waitingForInternalApproval", "Waiting for Internal Approval");
put(fancyStepDict, "approved", "Approved");
put(fancyStepDict, "waitingForSignature", "Waiting for Signature");
put(fancyStepDict, "signed", "Signed");
put(fancyStepDict, "orderedBeingFulfilled", "Ordered");
put(fancyStepDict, "beingChangedCanceled", "Being Changed / Canceled");
put(fancyStepDict, "closedFulfilled", "Fulfilled");
put(fancyStepDict, "canceled", "Canceled");
put(fancyStepDict, "rejectedByCustomer", "Rejected By Customer");
put(fancyStepDict, "alternateVersionOrdered", "Alternate Version Ordered");

viewStep = "STEP NOT MATCHED";
currStepPos = findinarray(listOfSteps, _system_current_step_var);
if (currStepPos > -1){
	if (direction == "next") {
		if (currStepPos == lastStepPos){
			viewStep = listOfSteps[0];
		} elif (currStepPos < lastStepPos){
			viewStep = listOfSteps[currStepPos + 1];
		}

	} elif (direction == "previous"){
		if (currStepPos == 0){
		viewStep = listOfSteps[lastStepPos];
		} elif (currStepPos <= lastStepPos){
			viewStep = listOfSteps[currStepPos -1];
		}
	}
	if (viewStep <> ""){
		if (containskey(fancyStepDict, viewStep)){
			viewStep = get(fancyStepDict, viewStep);
		} else {
			viewStep = "(" + viewStep + ")";
		}
	}
}
return viewStep;