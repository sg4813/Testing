ret =  json();
return ret;
/*
dictAccountData = dict("string");
dictConfigurationData  = dict("string");
arraySku = string[];
arraySkuEligible = string[];
arrayConstrainsRule = string[];
arraySkuPricing = string[];
strArraySkuJson = "";
arraySkuJsonArray = Jsonarray();
dictAccountPricingData = dict("dict<string>");
strPurchasingMethod = "";
strAutoAdd = "";
strCustomerGrp = "";

//Get Account Data
strOrganization = "";
dictAccountData = util.getAccountDetails(AccountId);
strPriceList = get(dictAccountData,"Price List");
strPurchasingMethod = get(dictAccountData,"Purchasing Method");
strOrganization = get(dictAccountData,"Organization");
strAccountType = get(dictAccountData,"Account Type");
strCustomerGrp = get(dictAccountData,"Customer Group");
//print strOrganization;

//Get Configuration Data
dictConfigurationData =  util.getConfigurationData(AccountId,ModelName);
strArraySkuJson = get(dictConfigurationData,"Sku Number");
arraySkuJsonArray = jsonarray(strArraySkuJson);
nCount = range(jsonarraysize(arraySkuJsonArray));
strAutoAdd = get(dictConfigurationData,"AutoAdd");

for each in nCount
{
	append(arraySku,jsonget(json(jsonarrayget(arraySkuJsonArray,each)),"Sku Number"));
}

//Get Item Master Constrains Rules
arrayConstrainsRule = util.getEligibilityConstrainRule("CPQ");

//Get Eligible Item Id and Sku Id
dictretEligilbleItem = dict("string");
dictretEligilbleItem = util.getEligibleItems(strPriceList, arraySku, arrayConstrainsRule,strOrganization,strAccountType,AccountId);
if(get(dictretEligilbleItem,"isEligibleItems") == "N")
{
	jsonput(ret,"Configuration", "");
	jsonput(ret,"Additional items", "");
	jsonput(ret,"Auto Add","");
	jsonput(ret,"Price List","");
	return ret;
}

if(strAccountType == "Internal")
{
	JsonarrayInternal = jsonarray(get(dictretEligilbleItem,"Sku Details"));
	dictAccountPricingData = dict("dict<string>");
	nCount = range(jsonarraysize(JsonarrayInternal));
	
	for each in nCount
	{
		jsonTemp = json(jsonarrayget(JsonarrayInternal,each));
		strSkuNumber = jsonget(jsonTemp,"Sku Number");
		strErrorCode = "";
		strListPrice = jsonget(jsonTemp,"List Price");
		dictTemp = dict("string");
		put(dictTemp,"PriceList",strListPrice );
		put(dictTemp,"ErrorCode",strErrorCode);
		put(dictTemp,"Eligible Flag","");
		put(dictAccountPricingData,strSkuNumber,dictTemp);
	}
	jsonFinalConfiguration = json();
	jsonGetAdditionalItemsDetails = json();
	jsonFinalConfiguration = util.getFinalConfigurationData(ModelName,Language,dictConfigurationData,dictretEligilbleItem,dictAccountPricingData);
	jsonGetAdditionalItemsDetails =  util.getAdditionalItemsDetailsnew(dictConfigurationData,dictretEligilbleItem,dictAccountPricingData);

	jsonput(ret,"Configuration", jsonFinalConfiguration);
	jsonput(ret,"Additional items", jsonGetAdditionalItemsDetails);
	jsonput(ret,"Auto Add",strAutoAdd);
	jsonput(ret,"Price List",strPriceList);
	return ret;
}
if(strAccountType == "End User" OR  strAccountType == "Non Classified Reseller")
{
	print "End User";
	//print dictretEligilbleItem;
	strArraySkuJson = get(dictretEligilbleItem,"Sku Details");
	//print strArraySkuJson;
	if(strArraySkuJson <> "")
	{
		arraySkuJsonArray = jsonarray(strArraySkuJson);
		nCount = range(jsonarraysize(arraySkuJsonArray));
		jsonArrayAccessCode = jsonarray();
		for each in nCount		
		{
			jsonTemp1 = json();
			append(arraySkuEligible,jsonget(json(jsonarrayget(arraySkuJsonArray,each)),"Sku Number"));
			strSku = jsonget(json(jsonarrayget(arraySkuJsonArray,each)),"Sku Number");
			strPrice = jsonget(json(jsonarrayget(arraySkuJsonArray,each)),"List Price");
			jsonput(jsonTemp1,"Sku Number", strSku);
			jsonput(jsonTemp1,"List Price", strPrice);
			jsonarrayappend(jsonArrayAccessCode,jsonTemp1);
		}
		//print jsonArrayAccessCode;
		strArraySkuJson = jsonarraytostr(jsonArrayAccessCode);
		//get Price from Account Catalog
		dictAccountPricingData = util.getPriceForEndUser(AccountId, arraySkuEligible,strArraySkuJson);
		jsonFinalConfiguration = json();
		jsonGetAdditionalItemsDetails = json();
		jsonFinalConfiguration = util.getFinalConfigurationData(ModelName,Language,dictConfigurationData,dictretEligilbleItem,dictAccountPricingData);
		jsonGetAdditionalItemsDetails =  util.getAdditionalItemsDetailsnew(dictConfigurationData,dictretEligilbleItem,dictAccountPricingData);

		jsonput(ret,"Configuration", jsonFinalConfiguration);
		jsonput(ret,"Additional items", jsonGetAdditionalItemsDetails);
		jsonput(ret,"Auto Add",strAutoAdd);
		jsonput(ret,"Price List",strPriceList);

	}////if(strArraySkuJson <> "")	
	return ret;
}
if(len(strCustomerGrp) > 0)
{
	strArraySkuJson = get(dictretEligilbleItem,"Sku Details");
	if(strArraySkuJson <> "")
	{
		arraySkuJsonArray = jsonarray(strArraySkuJson);
		nCount = range(jsonarraysize(arraySkuJsonArray));
		jsonArrayAccessCode = jsonarray();
		for each in nCount		
		{
			jsonTemp1 = json();
			append(arraySkuEligible,jsonget(json(jsonarrayget(arraySkuJsonArray,each)),"Sku Number"));
			strSku = jsonget(json(jsonarrayget(arraySkuJsonArray,each)),"Sku Number");
			strPrice = jsonget(json(jsonarrayget(arraySkuJsonArray,each)),"List Price");
			strAccessCode = jsonget(json(jsonarrayget(arraySkuJsonArray,each)),"Access Code");
			jsonput(jsonTemp1,"Sku Number", strSku);
			jsonput(jsonTemp1,"List Price", strPrice);
			jsonput(jsonTemp1,"Access Code",strAccessCode);
			jsonarrayappend(jsonArrayAccessCode,jsonTemp1);
		}
		//print jsonArrayAccessCode;
		strArraySkuJson = jsonarraytostr(jsonArrayAccessCode);
		//get Price from Account Catalog
		dictAccountPricingData = util.getPriceForSpecialAccount(AccountId, arraySkuEligible,strArraySkuJson);
		jsonFinalConfiguration = json();
		jsonGetAdditionalItemsDetails = json();
		jsonFinalConfiguration = util.getFinalConfigurationData(ModelName,Language,dictConfigurationData,dictretEligilbleItem,dictAccountPricingData);
		print "dictretEligilbleItem";
		print dictretEligilbleItem;
		jsonGetAdditionalItemsDetails =  util.getAdditionalItemsDetailsnewAccount(dictConfigurationData,dictretEligilbleItem,dictAccountPricingData);

		jsonput(ret,"Configuration", jsonFinalConfiguration);
		jsonput(ret,"Additional items", jsonGetAdditionalItemsDetails);
		jsonput(ret,"Auto Add",strAutoAdd);
		jsonput(ret,"Price List",strPriceList);

	}////if(strArraySkuJson <> "")	
        return ret;
	
	
}

strArraySkuJson = get(dictretEligilbleItem,"Account Sku");
if(strArraySkuJson <> "")
{
	arraySkuJsonArray = jsonarray(strArraySkuJson);
	nCount = range(jsonarraysize(arraySkuJsonArray));

	for each in nCount		
	{
		append(arraySkuEligible,jsonget(json(jsonarrayget(arraySkuJsonArray,each)),"Sku Number"));
	}
	
	//get Price from Account Catalog
	dictAccountPricingData = util.getPricingFromAccountCatalog(AccountId, arraySkuEligible,strArraySkuJson );	
	
	
}//if(strArraySkuJson <> "")
strPriceGroupJson = get(dictretEligilbleItem,"Price Group");

if(strPriceGroupJson <> "")
{
	jsonArrayPriceGroup = jsonarray(strPriceGroupJson);
	nPriceGrpCount = range(jsonarraysize(jsonArrayPriceGroup));
	if(strPurchasingMethod == "Indirect-Inactive")
	{
		for price in nPriceGrpCount 
		{
			jsonTemp = json(jsonarrayget(jsonArrayPriceGroup,Price));
			strSkuNumber = jsonget(jsonTemp,"Sku Number");
			strListPrice = jsonget(jsonTemp,"List Price");
			strErrorCode = "";
			dictTemp = dict("string");
			put(dictTemp,"PriceList",strListPrice );
			put(dictTemp,"ErrorCode","CPQ-Indirect");
			put(dictTemp,"Purchase Method","Indirect");
			//put(dictTemp,"ErrorCode",strErrorCode);
			put(dictAccountPricingData,strSkuNumber,dictTemp);
		}
	}
	else
	{
		dictPricing = util.getPriceFromDiscountedMatrix(strPriceGroupJson,dictAccountData);
		for each in arraySku
		{
			//print "inside arrayskurpricing";
			//print each;
			if(containskey(dictPricing,each))
			{
				dictTemp = get(dictPricing,each);
				print dictTemp;
				put(dictAccountPricingData,each,dictTemp);
			}
		}
	}
}

jsonFinalConfiguration = json();
jsonGetAdditionalItemsDetails = json();
jsonFinalConfiguration = util.getFinalConfigurationData(ModelName,Language,dictConfigurationData,dictretEligilbleItem,dictAccountPricingData);
//print "@@@";
//print jsonFinalConfiguration;

jsonGetAdditionalItemsDetails =  util.getAdditionalItemsDetailsnew(dictConfigurationData,dictretEligilbleItem,dictAccountPricingData);

jsonput(ret,"Configuration", jsonFinalConfiguration);
jsonput(ret,"Additional items", jsonGetAdditionalItemsDetails);
jsonput(ret,"Auto Add",strAutoAdd);
jsonput(ret,"Price List",strPriceList);

return ret;*/