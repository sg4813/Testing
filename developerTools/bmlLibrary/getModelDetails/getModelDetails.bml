ret = dict("string");
ModelJsonArray = jsonarray();
tableColumn = "";
localTable = "";
sb = stringbuilder();
bFlag = false;

//Inactive due to multilingual is not in scope
/*
recMultiLang = bmql("Select $Language from Multi_Lang_Column where SkuType = 'StdConfiguration'");

localMultiLang = "";
strlocalColumn = "";

for each in recMultiLang
{
	localMultiLang = get(each,Language);
	strlocalColumn = localMultiLang;
} 
print localMultiLang;

localMultiLang = localMultiLang + ", " + "StdConfiguration";
//print localMultiLang;

recMultiLang = bmql("Select $localMultiLang from SKU_Multilingual Where StdConfiguration IN $SkuNumber");

dictMultiLang = dict("string");
print recMultiLang;

for each in recMultiLang
{
	put(dictMultiLang,get(each,"StdConfiguration"),get(each,strlocalColumn));
}

print dictMultiLang;
*/
print "BundledKit";
print BundledKit;
recSet = bmql("Select Table, Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15 from ModelColumns where Model = $Model AND BundledKit = $BundledKit");
print "recSet***************";
print recSet;
print "recSet***************";
for each in recSet{
	localTable = get(each,"Table");
	localColumn1 = get(each, "Column1");
	localColumn2 = get(each, "Column2");
	localColumn3 = get(each, "Column3");
	localColumn4 = get(each, "Column4");
	localColumn5 = get(each, "Column5");
	localColumn6 = get(each, "Column6");
	localColumn7 = get(each, "Column7");
	localColumn8 = get(each, "Column8");
	localColumn9 = get(each, "Column9");
	localColumn10 = get(each, "Column10");
	localColumn11 = get(each, "Column11");
	localColumn12 = get(each, "Column12");
	localColumn13 = get(each, "Column13");
	localColumn14 = get(each, "Column14");
	localColumn15 = get(each, "Column15");
	if(localTable <> ""){
		
		tableColumn = tableColumn + localTable + "." + "StdConfiguration" + ", ";
		//if(BundledKit == "Yes")
		//{
		//	tableColumn = tableColumn + localTable + "." + "ParentSKU" + ", ";
		//}
		if(localColumn1 <> ""){
		//if(BundledKit == "No")
		//{
			tableColumn = tableColumn + localTable + "." + localColumn1 + ", ";
		//}
		sbappend(sb,localcolumn1,"~");	
		}
		if(localColumn2 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn2 + ", ";
		sbappend(sb,localcolumn2,"~");
		}
		if(localColumn3 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn3 + ", ";
		sbappend(sb,localcolumn3,"~");
		}
		if(localColumn4 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn4 + ", ";
		sbappend(sb,localcolumn4,"~");
		}
		if(localColumn5 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn5 + ", ";
		sbappend(sb,localcolumn5,"~");
		}
		if(localColumn6 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn6 + ", ";
		sbappend(sb,localcolumn6,"~");
		}
		if(localColumn7 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn7 + ", ";
		sbappend(sb,localcolumn7,"~");
		}
		if(localColumn8 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn8 + ", ";
		sbappend(sb,localcolumn8,"~");
		}
		if(localColumn9 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn9 + ", ";
		sbappend(sb,localcolumn9,"~");
		}
		if(localColumn10 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn10 + ", ";
		sbappend(sb,localcolumn10,"~");
		}
		if(localColumn11 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn11 + ", ";
		sbappend(sb,localcolumn11,"~");
		}
		if(localColumn12 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn12 + ", ";
		sbappend(sb,localcolumn12,"~");
		}
		if(localColumn13 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn13 + ", ";
		sbappend(sb,localcolumn13,"~");
		}
		if(localColumn14 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn14 + ", ";
		sbappend(sb,localcolumn14,"~");
		}
		if(localColumn15 <> ""){
		tableColumn = tableColumn + localTable + "." + localColumn15 + ", ";
		sbappend(sb,localcolumn15,"~");
		}
		
	}
}
if(endswith(tableColumn, ", ")){
tableColumn = substring(tableColumn,0,len(tableColumn)-2);
}
print tableColumn;
print localTable;
print SkuNumber;
print BundledKit;
print SkuNumber;
rs = recordset();
if(BundledKit == "Yes")
{

	rs = bmql("Select $tableColumn from $localTable where StdConfiguration IN $SkuNumber AND ParentSKU IS NOT NULL");
	//rs = bmql("Select $tableColumn from $localTable");
	
}
else
{
	rs = bmql("Select $tableColumn from $localTable where StdConfiguration IN $SkuNumber AND ParentSKU IS NULL");
}
print "Inside Model Json******************";
print rs;
for each in rs
{
	ModelJson = json();
	bFlag = false;
	for Val in recSet{
	
		localColumn1 = get(Val, "Column1");
		localColumn2 = get(Val, "Column2");
		localColumn3 = get(Val, "Column3");
		localColumn4 = get(Val, "Column4");
		localColumn5 = get(Val, "Column5");
		localColumn6 = get(Val, "Column6");
		localColumn7 = get(Val, "Column7");
		localColumn8 = get(Val, "Column8");
		localColumn9 = get(Val, "Column9");
		localColumn10 = get(Val, "Column10");
		localColumn11 = get(Val, "Column11");
		localColumn12 = get(Val, "Column12");
		localColumn13 = get(Val, "Column13");
		localColumn14 = get(Val, "Column14");
		localColumn15 = get(Val, "Column15");
		if(localColumn1 <> ""){
		jsonput(ModelJson, localColumn1, get(each,localColumn1));
		}
		if(localColumn2 <> ""){
		jsonput(ModelJson, localColumn2, get(each,localColumn2));
		}
		if(localColumn3 <> ""){
		jsonput(ModelJson, localColumn3, get(each,localColumn3));
		}
		if(localColumn4 <> ""){
		jsonput(ModelJson, localColumn4, get(each,localColumn4));
		}
		if(localColumn5 <> ""){
		jsonput(ModelJson, localColumn5, get(each,localColumn5));
		}
		if(localColumn6 <> ""){
		jsonput(ModelJson, localColumn6, get(each,localColumn6));
		}
		if(localColumn7 <> ""){
		jsonput(ModelJson, localColumn7, get(each,localColumn7));
		}
		if(localColumn8 <> ""){
		jsonput(ModelJson, localColumn8, get(each,localColumn8));
		}
		if(localColumn9 <> ""){
		jsonput(ModelJson, localColumn9, get(each,localColumn9));
		}
		if(localColumn10 <> ""){
		jsonput(ModelJson, localColumn10, get(each,localColumn10));
		}
		if(localColumn11 <> ""){
		jsonput(ModelJson, localColumn11, get(each,localColumn11));
		}
		if(localColumn12 <> ""){
		jsonput(ModelJson, localColumn12, get(each,localColumn12));
		}
		if(localColumn13 <> ""){
		jsonput(ModelJson, localColumn13, get(each,localColumn13));
		}
		if(localColumn14 <> ""){
		jsonput(ModelJson, localColumn14, get(each,localColumn14));
		}
		if(localColumn15 <> ""){
		jsonput(ModelJson, localColumn15, get(each,localColumn15));
		}
		jsonput(ModelJson,"Description",get(Description,get(each,"StdConfiguration")));
		jsonput(ModelJson,"SiebelProductId",get(SiebelProductId,get(each,"StdConfiguration")));
		jsonput(ModelJson,"ProductFamily",get(ProductFamilyId,get(each,"StdConfiguration")));
		jsonput(ModelJson,"SkuId", get(each,"StdConfiguration"));
		if(BundledKit == "Yes")
		{
			jsonput(ModelJson,"ParentSku", get(each,"ParentSKU"));
			print "std SKu";
			print get(each,"StdConfiguration");
		}
		
		if(containskey(ItemData, get(each,"StdConfiguration")))
		{
			tempPricingDict = get(itemData,get(each,"StdConfiguration"));
			print get(each,"StdConfiguration");
			print tempPricingDict;
			jsonput(ModelJson,"Pricing",get(tempPricingDict,"PriceList"));
			jsonput(ModelJson,"ErrorCode",get(tempPricingDict,"ErrorCode"));
			jsonput(ModelJson,"Purchasing Method",get(tempPricingDict,"Purchase Method"));
			jsonput(ModelJson,"Eligible Flag",get(tempPricingDict,"Eligible Flag"));
			jsonput(ModelJson,"List Price",get(tempPricingDict,"List Price"));
			bFlag = true;
			
		}
	}
	print "ModelJson***************";
	print ModelJson;
	print "ModelJson***************";
	print bFlag;
	if(bFlag)
	{
		jsonarrayappend(ModelJsonArray, ModelJson);	
	}
}
if(jsonarraysize(ModelJsonArray) > 0)
{
	put(ret,"Model Json", jsonarraytostr(ModelJsonArray));
}
else
{
	put(ret,"Model Json","");
}
put(ret,"Cloumn Sequence", sbtostring(sb));
return ret;